import React, { useState, useEffect } from "react";
import { saveAs } from "file-saver";

const CONTRACT_TYPES = [
  "RISEFALL", "DIGITDIFF", "DIGITMATCH", "DIGITOVER", "DIGITUNDER", "EVEN", "ODD"
];

export default function DerivTradingPlatform() {
  const [apiToken, setApiToken] = useState("");
  const [ws, setWs] = useState(null);
  const [market, setMarket] = useState("R_100");
  const [stake, setStake] = useState(0.35);
  const [balance, setBalance] = useState(5);
  const [profitTarget, setProfitTarget] = useState(2.5);
  const [lossLimit, setLossLimit] = useState(2);
  const [profit, setProfit] = useState(0);
  const [tradeHistory, setTradeHistory] = useState([]);
  const [contractType, setContractType] = useState("DIGITDIFF");
  const [barrier, setBarrier] = useState("0");
  const [duration, setDuration] = useState(1);
  const [durationUnit, setDurationUnit] = useState("t");
  const [tradeInProgress, setTradeInProgress] = useState(false);

  useEffect(() => {
    if (ws) return;
    const socket = new WebSocket("wss://ws.derivws.com/websockets/v3");
    socket.onopen = () => {
      if (apiToken) {
        socket.send(JSON.stringify({ authorize: apiToken }));
      }
    };
    socket.onmessage = (msg) => {
      const data = JSON.parse(msg.data);
      if (data.tick) {
        const lastDigit = data.tick.quote.toString().slice(-1);
        console.log("Tick digit:", lastDigit);
      }
    };
    setWs(socket);
  }, [apiToken]);

  const subscribeToTicks = () => {
    if (ws) {
      ws.send(JSON.stringify({ ticks: market }));
    }
  };

  const executeTrade = () => {
    if (!ws || tradeInProgress) return;
    setTradeInProgress(true);
    const proposal = {
      proposal: 1,
      amount: stake,
      basis: "stake",
      contract_type: contractType,
      currency: "USD",
      duration,
      duration_unit: durationUnit,
      symbol: market,
    };
    if (["DIGITOVER", "DIGITUNDER", "DIGITDIFF", "DIGITMATCH"].includes(contractType)) {
      proposal.barrier = barrier;
    }
    ws.send(JSON.stringify(proposal));
    ws.onmessage = (msg) => {
      const data = JSON.parse(msg.data);
      if (data.proposal) {
        ws.send(JSON.stringify({ buy: data.proposal.id, price: stake }));
      } else if (data.buy) {
        const contractId = data.buy.contract_id;
        const checkResult = setInterval(() => {
          ws.send(JSON.stringify({ proposal_open_contract: 1, contract_id: contractId }));
        }, 2000);
        ws.onmessage = (e) => {
          const res = JSON.parse(e.data);
          if (res.proposal_open_contract && res.proposal_open_contract.is_sold) {
            clearInterval(checkResult);
            const outcome = res.proposal_open_contract.profit;
            setBalance((prev) => prev + outcome);
            setProfit((p) => p + outcome);
            setTradeHistory((h) => [...h, outcome]);
            if (outcome < 0) setStake((s) => s * 2);
            else setStake(0.35);
            setTradeInProgress(false);
            if (profit >= profitTarget || (5 - balance) >= lossLimit) {
              alert("Target reached or max loss hit. Stopping.");
              ws.close();
            }
          }
        };
      }
    };
  };

  const downloadHistory = () => {
    const csvContent = ["Trade,Result"]
      .concat(tradeHistory.map((v, i) => `${i + 1},${v.toFixed(2)}`))
      .join("\n");
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    saveAs(blob, "trade_history.csv");
  };

  return (
    <div className="p-4 max-w-3xl mx-auto space-y-4">
      <h1 className="text-2xl font-bold">Deriv Trading Platform</h1>
      <input
        placeholder="Enter Deriv API Token"
        value={apiToken}
        onChange={(e) => setApiToken(e.target.value)}
        className="border p-2 rounded w-full"
      />
      <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
        <input
          placeholder="Market (e.g. R_100)"
          value={market}
          onChange={(e) => setMarket(e.target.value)}
          className="border p-2 rounded"
        />
        <select
          className="border p-2 rounded"
          value={contractType}
          onChange={(e) => setContractType(e.target.value)}
        >
          {CONTRACT_TYPES.map((type) => (
            <option key={type} value={type}>{type}</option>
          ))}
        </select>
        <input
          placeholder="Barrier/Prediction"
          value={barrier}
          onChange={(e) => setBarrier(e.target.value)}
          className="border p-2 rounded"
        />
        <input
          placeholder="Stake"
          type="number"
          value={stake}
          onChange={(e) => setStake(parseFloat(e.target.value))}
          className="border p-2 rounded"
        />
        <input
          placeholder="Duration"
          type="number"
          value={duration}
          onChange={(e) => setDuration(parseInt(e.target.value))}
          className="border p-2 rounded"
        />
        <input
          placeholder="Duration Unit (e.g. t, m)"
          value={durationUnit}
          onChange={(e) => setDurationUnit(e.target.value)}
          className="border p-2 rounded"
        />
      </div>
      <div className="grid grid-cols-2 gap-2">
        <input
          placeholder="Profit Target"
          type="number"
          value={profitTarget}
          onChange={(e) => setProfitTarget(parseFloat(e.target.value))}
          className="border p-2 rounded"
        />
        <input
          placeholder="Loss Limit"
          type="number"
          value={lossLimit}
          onChange={(e) => setLossLimit(parseFloat(e.target.value))}
          className="border p-2 rounded"
        />
      </div>
      <div className="flex gap-2">
        <button onClick={subscribeToTicks} className="bg-blue-500 text-white p-2 rounded">Subscribe</button>
        <button
          onClick={executeTrade}
          disabled={tradeInProgress}
          className="bg-green-500 text-white p-2 rounded disabled:opacity-50"
        >
          Execute Trade
        </button>
        <button
          onClick={downloadHistory}
          className="bg-gray-600 text-white p-2 rounded"
        >
          Download History
        </button>
      </div>
      <div className="p-2 bg-gray-100 rounded">
        <p>Balance: ${balance.toFixed(2)}</p>
        <p>Profit: ${profit.toFixed(2)}</p>
      </div>
      <div>
        <h2 className="text-lg font-semibold">Trade History</h2>
        <ul className="list-disc pl-6">
          {tradeHistory.map((result, i) => (
            <li key={i}>Trade {i + 1}: {result > 0 ? "+" : ""}{result.toFixed(2)}</li>
          ))}
        </ul>
      </div>
      <div className="mt-4">
        <iframe
          src="https://s.tradingview.com/widgetembed/?symbol=DERIV%3AR_100&interval=1&hidesidetoolbar=1&hidetoptoolbar=1&symboledit=1&toolbarbg=F1F3F6&theme=light&style=1"
          width="100%"
          height="400"
          frameBorder="0"
          allowFullScreen
          title="TradingView Chart"
        ></iframe>
      </div>
    </div>
  );
}